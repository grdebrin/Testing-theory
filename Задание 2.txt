1. Что такое проект?
Ответ: Это временное предприятие, осуществляемое для создания уникального продукта, услуги или результата.
2. Из каких этапов состоит Waterfall model/Каскадная модель?
Ответ:  1. Анализ требований
        2. Проектирование
        3. Дизайн
        4. Кодирование
        5. Тестирование
        6. Поддержка
3. Какие преимущества и недостатки Waterfall model/Каскадной модели?
Ответ: Преимущества:
	1. Легко управлять проектом.
	2. Разработка проходит быстро, стоимость и срок заранее определены.
	Недостатки:
	1. Нет возможности сделать шаг назад, тестирование начинается только после
того, как разработка завершена или почти завершена.
	2. Продукты, разработанные по данной модели без обоснованного ее выбора,
могут иметь недочеты (список требований нельзя скорректировать в любой
момент), о которых становится известно лишь в конце из-за строгой
последовательности действий.
	3. Стоимость внесения изменений высока, так как для ее инициализации
приходится ждать завершения всего проекта.
4. Из каких этапов состоит V-model/V- модель?
Ответ:  1. Бизнес-требования
        2. Функциональные требования
	3. Архитектура системы
	4. Реализация
	5. Модульное тестирование
	6. Интеграционное тестирование
	7. Функциональное тестирование
	8. Приемочное тестирование 
5. Когда использовать V-model/V- модель?
Ответ:  1. Если требуется тщательное тестирование продукта, то V-модель оправдает
заложенную в себя идею: validation and verification.
        2. Для малых и средних проектов, где требования четко определены и
фиксированы.
        3. В условиях доступности инженеров необходимой квалификации, особенно
тестировщиков.
6. Из каких этапов состоит Iterative model/Итеративная модель?
Ответ: Создание начинается с реализации части функционала, становящейся базой для определения дальнейших требований.
7. Когда использовать Iterative model/Итеративной модели?
Ответ:  1. Для крупных проектов.
	2. Когда известны, по крайней мере, ключевые требования.
	3. Когда требования к проекту могут меняться в процессе разработки.
8. Плюсы и минусы Iterative model/Итеративной модели?
Ответ: Достоинства: 
        1. Раннее создание работающего ПО.
        2. Гибкость – готовность к изменению требований на любом этапе разработки.
        3. Каждая итерация – маленький этап, для которого тестирование и анализ рисков обеспечить проще, чем для всего жизненного цикла продукта.
        Недостатки:
        1. Каждая фаза – самостоятельна, отдельные итерации не накладываются.
        2. Могут возникнуть проблемы с реализацией общей архитектуры системы,
поскольку не все требования известны к началу проектирования.
9. Agile - это?
Ответ: это гибкий подход к управлению проектами по разработке ПО.
10. Agile манифест - это?
Ответ: Основной документ, содержащий описание ценностей и принципов гибкой разработки программного обеспечения.
11. Какие ценности Agile манифест?
Ответ:  1. Люди важнее процессов и инструментов.
        2. Работающий продукт важнее исчерпывающей документации.
        3. Сотрудничество с заказчиком важнее согласования условий контракта.
        4. Готовность к изменениям важнее следованию первоначальному плану.
12. Основные принципы Agile манифест?
Ответ:  1. Наивысшим приоритетом для нас является удовлетворение потребностей заказчика, благодаря регулярной и ранней поставке ценного программного обеспечения.
        2. Изменение требований приветствуется даже на поздних стадиях разработки. Agile-процессы позволяют использовать изменения для обеспечения конкурентного преимущества заказчика.
        3. Работающий продукт следует выпускать как можно чаще, с периодичностью от двух недель до двух месяцев.
        4. На протяжении всего проекта разработчики и представители бизнеса должны ежедневно работать вместе.
        5. Над проектом должны работать мотивированные профессионалы. Чтобы работа была сделана, создайте им условия, обеспечьте поддержку — и полностью им доверьтесь.
        6. Непосредственное общение — наиболее практичный и эффективный способ обмена информацией как с самой командой, так и внутри команды. 
        7. Работающий продукт — основной показатель прогресса.
        8. Agile помогает наладить устойчивый процесс разработки. Инвесторы, разработчики и пользователи должны иметь возможность бесконечно поддерживать постоянный ритм Многие команды поначалу показывают бурный прогресс, который не получается сохранить до конца проекта.
        9. Постоянное внимание к техническому совершенству и качеству проектирования повышает гибкость проекта.
        10. Простота как искусство сократить до минимума лишнюю работу крайне необходима.
        11. Самые лучшие требования, архитектурные и технические решения рождаются у самоорганизующихся команд.
        12. Команда должна систематически анализировать возможные способы улучшения эффективности и соответственно корректировать стиль своей работы.
13. Scrum - это?
Ответ: Это методика гибкого управления проектами.
14. Преимущества и недостатки Scrum.
Ответ: Достоинства:
	1. Раннее создание работающего ПО.
	2. Гибкость – готовность к изменению требований на любом этапе разработки.
	3. Каждая итерация – маленький этап, для которого тестирование и анализ рисков обеспечить проще, чем для всего жизненного цикла продукта.
	Недостатки: 
	1. Могут возникнуть проблемы с реализацией общей архитектуры системы, поскольку не все требования известны к началу проектирования.
	2. За счет гибкости увеличивается стоимость проекта.
15. Kanban- это?
Ответ: Это система постановки задач и организации рабочих процессов для эффективного достижения поставленных целей.
16. Преимущества и недостатки Kanban?
Ответ: Преимущества:
	Чистый Kanban плохо работает для продуктовых команд, но отлично работает с командами поддержки, такими как:
        1. Группы поддержки программного обеспечения, где не важен «план», но важна скорость реагирования на изменения.
        2. Группы тестирования, работающие отдельно от групп разработки; службы поддержки.
        Недостатки: 
	1. Данная методология плохо работает с большими командами, а это больше 5 человек).
	2. В чистом виде, Kanban плохо работает с кросс-функциональными командами.
	Т.е. в отличие от Scrum, тяжело совместить тестирование и разработку в одной команде. Более удачной мыслью является разбить процесс на «станцию» разработки и «станцию» тестирования с отдельными руководителями и backlog-ами.
        3. Ввиду своей истории и специфики, Kanban не предназначен для долгосрочного планирования.