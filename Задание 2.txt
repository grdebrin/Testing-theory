1. Что такое проект?
Ответ: Это временное предприятие, осуществляемое для создания уникального продукта, услуги или результата.
2. Из каких этапов состоит Waterfall model/Каскадная модель?
Ответ:  1. Анализ требований
        2. Проектирование
        3. Дизайн
        4. Кодирование
        5. Тестирование
        6. Поддержка
3. Какие преимущества и недостатки Waterfall model/Каскадной модели?
Ответ: Преимущества:
	1. Легко управлять проектом.
	2. Разработка проходит быстро, стоимость и срок заранее определены.
	Недостатки:
	1. Нет возможности сделать шаг назад, тестирование начинается только после
того, как разработка завершена или почти завершена.
	2. Продукты, разработанные по данной модели без обоснованного ее выбора,
могут иметь недочеты (список требований нельзя скорректировать в любой
момент), о которых становится известно лишь в конце из-за строгой
последовательности действий.
	3. Стоимость внесения изменений высока, так как для ее инициализации
приходится ждать завершения всего проекта.
4. Из каких этапов состоит V-model/V- модель?
Ответ:  1. Бизнес-требования
        2. Функциональные требования
	3. Архитектура системы
	4. Реализация
	5. Модульное тестирование
	6. Интеграционное тестирование
	7. Функциональное тестирование
	8. Приемочное тестирование 
5. Когда использовать V-model/V- модель?
Ответ:  1. Если требуется тщательное тестирование продукта, то V-модель оправдает
заложенную в себя идею: validation and verification.
        2. Для малых и средних проектов, где требования четко определены и
фиксированы.
        3. В условиях доступности инженеров необходимой квалификации, особенно
тестировщиков.
6. Из каких этапов состоит Iterative model/Итеративная модель?
Ответ: Создание начинается с реализации части функционала, становящейся базой для определения дальнейших требований.
7. Когда использовать Iterative model/Итеративной модели?
Ответ:  1. Для крупных проектов.
	2. Когда известны, по крайней мере, ключевые требования.
	3. Когда требования к проекту могут меняться в процессе разработки.
8. Плюсы и минусы Iterative model/Итеративной модели?
Ответ: Достоинства: 
        1. Раннее создание работающего ПО.
        2. Гибкость – готовность к изменению требований на любом этапе разработки.
        3. Каждая итерация – маленький этап, для которого тестирование и анализ рисков обеспечить проще, чем для всего жизненного цикла продукта.
        Недостатки:
        1. Каждая фаза – самостоятельна, отдельные итерации не накладываются.
        2. Могут возникнуть проблемы с реализацией общей архитектуры системы,
поскольку не все требования известны к началу проектирования.
9. Agile - это?
Ответ: это гибкий подход к управлению проектами по разработке ПО.
10. Agile манифест - это?
Ответ: Основной документ, содержащий описание ценностей и принципов гибкой разработки программного обеспечения.
11. Какие ценности Agile манифест?
Ответ:  1. Люди важнее процессов и инструментов.
        2. Работающий продукт важнее исчерпывающей документации.
        3. Сотрудничество с заказчиком важнее согласования условий контракта.
        4. Готовность к изменениям важнее следованию первоначальному плану.
12. Основные принципы Agile манифест?
Ответ:  1. Наивысшим приоритетом для нас является удовлетворение потребностей заказчика, благодаря регулярной и ранней поставке ценного программного обеспечения.
        2. Изменение требований приветствуется даже на поздних стадиях разработки. Agile-процессы позволяют использовать изменения для обеспечения конкурентного преимущества заказчика.
        3. Работающий продукт следует выпускать как можно чаще, с периодичностью от двух недель до двух месяцев.
        4. На протяжении всего проекта разработчики и представители бизнеса должны ежедневно работать вместе.
        5. Над проектом должны работать мотивированные профессионалы. Чтобы работа была сделана, создайте им условия, обеспечьте поддержку — и полностью им доверьтесь.
        6. Непосредственное общение — наиболее практичный и эффективный способ обмена информацией как с самой командой, так и внутри команды. 
        7. Работающий продукт — основной показатель прогресса.
        8. Agile помогает наладить устойчивый процесс разработки. Инвесторы, разработчики и пользователи должны иметь возможность бесконечно поддерживать постоянный ритм Многие команды поначалу показывают бурный прогресс, который не получается сохранить до конца проекта.
        9. Постоянное внимание к техническому совершенству и качеству проектирования повышает гибкость проекта.
        10. Простота как искусство сократить до минимума лишнюю работу крайне необходима.
        11. Самые лучшие требования, архитектурные и технические решения рождаются у самоорганизующихся команд.
        12. Команда должна систематически анализировать возможные способы улучшения эффективности и соответственно корректировать стиль своей работы.
13. Scrum - это?
Ответ: Это методика гибкого управления проектами.
Основная единица Scrum — небольшая команда людей, Scrum Team. Scrum Team состоит из одного Scrum Master, одного Product Owner и Developers. Внутри Scrum Team нет подкоманд и иерархий. Это сплоченное объединение профессионалов, в любой момент времени сфокусированных на одной цели.
Product owner (владелец продукта) – это человек, который знает, как он хочет, чтобы выглядел продукт. Его основной обязанностью является формулирование и приоритизация требований. Зачастую, это представитель заказчика (или сам заказчик), который обладает некоторым видением продукта, пониманием предметной области и задач, которые продукт призван решать.
Scrum team (скрам команда) – это команда, которая непосредственно участвует в разработке (зачастую из 3-7 человек). Состоит из разработчиков, тестировщиков, аналитиков и т. д. В задачи команды, кроме собственно разработки, входит оценка сложности задач.
Scrum Master (скрам-мастер) – его обязанности: наблюдать за соблюдением принципов Scrum, решать спорные либо конфликтные ситуации, вести Scrum-совещания, заполнять обзор спринта и тому подобное. 
В Scrum итерация работы команды называется "спринт" (sprint). Спринт - это временной интервал, в рамках которого перед командой стоит задача реализовать согласованное количество требований, объединенных общей целью. Длительность спринта определяется конкретными условиями и требованиями к
процессам разработки программного обеспечения и создаваемому продукту.
Оптимальной длительностью спринта считается интервал 2 недели, максимально возможной - 6 недель.
Жизненный цикл спринта:
Жизненный цикл спринта состоит из следующих этапов:
1. Планирование (sprint planning meeting) – формирование списка задач, который планируется реализовать в рамках спринта.
2. Разработка– техническая реализация запланированных задач.
3. Тестирование – проверка технической реализации на соответствие требованиям, проверка качества реализации.
4. Демонстрация – проведение демонстрации функциональности команде и при необходимости заказчику;
5. Выпуск (релиз) системы – подготовка пакета обновления (установки), выполнение обновления системы в промышленной среде.
В спринте есть специфические активности:
Ежедневное совещание (daily Scrum meeting или stand-up meeting).
Каждый из членов команды рассказывает о том, что он сделал с момента предыдущего совещания, какая ему необходима помощь (если необходима) и чем он планирует заниматься дальше.
Груминг - это практика "причесывания" беклога (по-английски "grooming"). Это активность, которая делается один раз в спринт для подготовки бэклога к следующему спринт-планированию.
Демонстрация спринта (sprint demo).
В процессе демонстрации спринта команда показывает владельцу продукта, а также всем заинтересованным разработанную за спринт функциональность, отвечает на вопросы по ней (незаконченная функциональность не демонстрируется).
Ретроспективное совещание (retrospective meeting)
Смысл ретроспективного совещания в том, чтобы выявить положительные и отрицательные аспекты прошедшего спринта, с целью постоянного совершенствования рабочего процесса.
Бэклог – это структурированный список актуальных задач, которые необходимо сделать команде , будь это функции в продукте, который вы разрабатываете, или обращения в техподдержку. Бэклог формируется и приоритизируется продукт оунером.
14. Что такое Velocity / Capacity?
Ответ: Velocity определяет, сколько работы команда или разработчик может выполнить, исходя из предыдущего опыта и истории выполнения задач, а Capacity определяет объем работы, который команда или разработчик могут выполнить, исходя из доступных ресурсов и ограничений.
15. Преимущества и недостатки Scrum.
Ответ: Достоинства:
	1. Раннее создание работающего ПО.
	2. Гибкость – готовность к изменению требований на любом этапе разработки.
	3. Каждая итерация – маленький этап, для которого тестирование и анализ рисков обеспечить проще, чем для всего жизненного цикла продукта.
	Недостатки: 
	1. Могут возникнуть проблемы с реализацией общей архитектуры системы, поскольку не все требования известны к началу проектирования.
	2. За счет гибкости увеличивается стоимость проекта.
16. Kanban- это?
Ответ: 
Методология Kanban представляет собой подход к управлению проектами и разработкой программного обеспечения, который уделяет особое внимание визуализации рабочего процесса и ограничению рабочего потока. Основные принципы Kanban включают:
1. Визуализация рабочего процесса: Канбан предполагает создание доски задач, на которой каждая задача представлена карточкой. Эти карточки перемещаются по колонкам, представляющим различные этапы работы, начиная с постановки задачи и заканчивая завершением. Визуализация позволяет всем членам команды видеть текущий статус задач и легко отслеживать прогресс.
2. Ограничение рабочего потока: Каждая колонка на доске имеет ограничение по числу карточек, которые могут находиться в ней одновременно. Это помогает предотвратить перегрузку команды задачами и обеспечить более равномерное распределение работы.
3. Управление потоком: Канбан акцентирует внимание на управлении потоком работ, поощряя команду сосредотачиваться на завершении текущей задачи перед тем, как брать новые.
4. Непрерывное улучшение: Методология Kanban поддерживает непрерывное улучшение процесса разработки. Команда регулярно анализирует свой рабочий процесс, выявляет узкие места и внедряет изменения для повышения эффективности.
5. Гибкость и адаптивность: Kanban гибко подстраивается под потребности команды и проекта. Он не предписывает жестких правил и позволяет команде настраивать свой рабочий процесс в соответствии с изменяющимися условиями и требованиями.
17. Преимущества и недостатки Kanban?
Ответ: Преимущества:
	Чистый Kanban плохо работает для продуктовых команд, но отлично работает с командами поддержки, такими как:
        1. Группы поддержки программного обеспечения, где не важен «план», но важна скорость реагирования на изменения.
        2. Группы тестирования, работающие отдельно от групп разработки; службы поддержки.
        Недостатки: 
	1. Данная методология плохо работает с большими командами, а это больше 5 человек).
	2. В чистом виде, Kanban плохо работает с кросс-функциональными командами.
	Т.е. в отличие от Scrum, тяжело совместить тестирование и разработку в одной команде. Более удачной мыслью является разбить процесс на «станцию» разработки и «станцию» тестирования с отдельными руководителями и backlog-ами.
        3. Ввиду своей истории и специфики, Kanban не предназначен для долгосрочного планирования.
18. Что такое SDLS? Из каких этапов состоит? Что происходит на каждом этапе?
Ответ: 
Software Development Life Cycle (Жизненный цикл разработки программного обеспечения). SDLC представляет собой стандартный набор процессов и этапов, которые разработчики программного обеспечения проходят при создании и сопровождении программного продукта. Этот процесс состоит из следующих этапов:
	1. Планирование (Planning) - На этом этапе определяются цели и требования проекта, а также определяются ресурсы и расписание для выполнения проекта. В результате разрабатывается план работ.
	2. Анализ (Analysis) - На этом этапе проводится анализ требований пользователей и бизнес-потребностей, чтобы определить, какие функции и характеристики должны быть включены в программное решение. Результатом этого этапа является документ, содержащий спецификацию требований.
	3. Проектирование (Design) - На этом этапе разрабатывается общая архитектура программного решения, определяются структура данных, интерфейсы пользователя и другие детали, необходимые для создания системы.
	4. Реализация (Implementation) - Этот этап включает в себя фактическую разработку и написание кода программного решения в соответствии с разработанной архитектурой и дизайном.
	5. Тестирование (Testing) - На этом этапе проверяется работоспособность программного решения, включая его функциональность, производительность, безопасность и другие аспекты. Различные виды тестирования, такие как модульное тестирование, интеграционное тестирование, системное тестирование и приемочное тестирование, могут быть проведены на этом этапе.
	6. Внедрение (Deployment) - После успешного завершения тестирования программное решение развертывается и внедряется в среду пользователя. Этот этап может также включать обучение пользователей и поддержку внедрения новой системы.
	7. Сопровождение (Maintenance) - На этом этапе обеспечивается долгосрочная поддержка и обновление программного решения. Это может включать в себя исправление ошибок, внесение изменений в соответствии с новыми требованиями и обновление системы для поддержки новых технологий.
19. Что такое STLS? Из каких этапов состоит? Что происходит на каждом этапе?
Ответ:
Software Testing Life Cycle (Жизненный цикл тестирования программного обеспечения). Это набор этапов и процессов, связанных с планированием, разработкой, выполнением и анализом тестовых сценариев для обеспечения качества программного продукта. Вот основные этапы STLC:
	1. Планирование (Planning) - На этом этапе определяются цели тестирования, стратегия тестирования, ресурсы, расписание и состав команды для выполнения тестирования. Создается план тестирования, который определяет общий подход к тестированию и способы его реализации.
	2. Анализ (Analysis) - В этой фазе анализируются требования к продукту, артефакты разработки (такие как спецификации, документация, диаграммы и т. д.), чтобы определить области для тестирования. Также на этом этапе определяются тестовые случаи и сценарии на основе требований.
	3. Дизайн тестов (Test Design) - На этом этапе создаются тестовые случаи, сценарии и планы, а также определяются тестовые данные и окружение, необходимое для выполнения тестирования. Тестовые случаи могут быть разработаны для различных аспектов, таких как функциональное тестирование, тестирование производительности, тестирование безопасности и т. д.
	4. Реализация (Implementation) - На этом этапе тестовые сценарии и случаи реализуются, а тестовое окружение настраивается и подготавливается для выполнения тестов. Тестовые скрипты могут быть написаны, а также могут быть созданы тестовые данные.
	5. Выполнение тестов (Execution) - В этой фазе тестовые случаи и сценарии запускаются в тестовом окружении, результаты тестирования записываются и отслеживаются. Ошибки и дефекты также регистрируются и отслеживаются для последующего исправления.
	6. Оценка и репортинг (Evaluation and Reporting) - После завершения выполнения тестов результаты анализируются, оцениваются и документируются. Формируются отчеты о прохождении тестирования, включающие в себя обнаруженные дефекты, покрытие тестами, качество программного продукта и рекомендации для дальнейших улучшений.
	7. Завершение (Closure) - На этом этапе проводится общая оценка выполнения тестирования, делаются выводы о качестве программного продукта и оцениваются достигнутые результаты. Также могут быть собраны уроки и рекомендации для будущих проектов.

