1. Требования - это что?
Ответ: Требование — это любое условие, которому должна соответствовать разрабатываемая система или программное средство.
2. Для чего нужен Анализ требований в разработке программного обеспечения?
Ответ: Найти ошибки на ранней стадии разработки.
3. Перечислите Виды требований
Ответ: Функциональные и Нефункциональные.
4. Перечислите Функциональные уровни требований
Ответ: Бизнес-требования, Пользовательские требования, Функциональные требования, Системные требования.
5. Перечислите Нефункциональные уровни требований
Ответ: Требования к документированию, Требования к дизайну и юзабилити, Требования к безопасности и надежности, Требования к показателям назначения (производительность, устойчивость к сбоям и т. п.), Требования к эксплуатации и персоналу, Прочие требования и ограничения (внешние воздействия, мобильность, автономность и т. п.).
6. Перечислите техники сбора требований
Ответ: 
1. Мозговой штурм
2. Анализ документов
3. Фокус-группы
4. Анализ интерфейсов
5. Интервью
6. Наблюдение
7. Прототипирование
8. Семинары
9. Опрос
7. Что такое Спецификация требований программного обеспечения (SRS)?
Ответ:  Структурированный набор требований/запросов (функциональность, производительность, конструктивные ограничения и атрибуты) к программному обеспечению и его внешним интерфейсам.
8. Что такое Use Case?
Ответ: Это сценарная техника описания взаимодействия.
9. Приведите пример Use Case
Ответ: После успешного входа пользователю отсылается уведомление на mail id
10. Перечислите Характеристики качества требований
Ответ: 
1. Единичность
2. Атомарность
3. Завершенность
4. Последовательность
5. Отслеживаемость
6. Актуальность
7. Выполнимость
8. Понятность
9. Проверяемость
10. Обязательность
11. Полнота
11. Приведите пример к каждой Характеристике качества требований
Ответ:  Единичность - Система должна позволять регистрацию пользователей.
        Атомарность - Пользователь может авторизоваться с помощью следующих соцсетей: VK, ОК, Fb.
        Завершенность - В функционале, описывающем регистрацию: «для завершения регистрации пользователь должен ввести капчу». Больше это требование не встречается в документации.
        Последовательность - когда пользователь снимает трубку, телефон должен издавать гудок (примечание: для проверки требуется общий анализ документации).
        Отслеживаемость - В приложении требуется подтверждения возраста (согласно требованию этического комитета заказчика).
        Актуальность - Приложение должно работать в ОС Win не ниже 10.
        Выполнимость - Приложение должно загружаться на ПК пользователя за 3 секунды.
        Понятность - Поле ввода “Номер телефона” имеет маску на ввод, которая позволяет вводить в поле только цифры от 0 до 9 .
        Проверяемость - Карточки в каталоге товара должны отображаться в виде таблицы. В каждой ячейке таблицы отображается превью товара размером 12х12.
        Обязательность - В интернет-магазине можно добавить товар на витрину.
        Полнота - Для ввода в поле доступны только буквы русского алфавита и пробел. Остальные символы ввести нельзя. Ввод не может начинаться с пробела, только с буквы. Регистр не имеет значения. Ограничения на ввод: минимум 2 максимум 160 символов. Поле обязательного заполнения приходит в состояние ошибки при потере фокуса без заполнения, при отправке пустого поля и при вводе количества символов меньше минимального. Снятие ошибки происходит при вводе значения, соответствующего маске ввода и валидации.
12. Что такое Пользовательские истории(User story)?
Ответ: Пользовательские истории — способ описания требований к разрабатываемой системе, сформулированных как одно или более предложений на повседневном или деловом языке пользователя.
13. Приведите пример Пользовательских историй(User story)
Ответ: Как продакт менеджер, я хочу быть в состоянии понять прогресс моих коллег, чтобы я мог лучше сообщать о наших успехах и неудачах стейкхолдерам.
14. Какие преимущества и недостатки Пользовательских историй(User story)?
Ответ:
Преимущества пользовательских историй (User Story):
User Story сфокусирована на пользователях, что помогает получить обратную связь от них и узнать их точки зрения, боли и потребности.
User Story можно обсуждать в команде, что позволяет каждому участнику предлагать идеи, думая как пользователь.
User Story помогает поэтапно разрабатывать продукт, описывая функции, которые можно разработать и протестировать за одну итерацию.
Недостатки пользовательских историй:
User Story не заменит требований, и для полного описания требований может быть недостаточно.
Если в User Story недостаточно деталей, её можно по-разному интерпретировать, что может привести к ошибкам в продукте.
15. Что такое Критерии приемки(Acceptance criteria)?
Ответ: Критерии, которым должны соответствовать компонент или система, для того, чтобы быть принятыми пользователем, заказчиком или другим уполномоченным лицом.
16. Перечислите виды и форматы критерий приемки
Ответ: 
Виды и форматы критериев приемки:
   - Функциональные критерии: Описывают ожидаемое поведение продукта или его компонентов.
   - Нефункциональные критерии: Охватывают аспекты, такие как производительность, безопасность, доступность и т.д.
   - Технические критерии: Устанавливают требования к техническим аспектам продукта, таким как совместимость, масштабируемость и т.д.
   - Бизнес-критерии: Оценивают соответствие продукта бизнес-целям и ожиданиям заказчика.
17. Приведите пример критерий приемки- список правил
Ответ:
Пример критерия приемки - список правил:
   - Все поля ввода должны быть заполнены.
   - Формат даты должен соответствовать стандарту DD.MM.YYYY.
   - Валидация электронной почты должна быть успешной для корректных адресов.
18. Приведите пример критерий приемки- поведенческий сценарий
Ответ: 
Пример критерия приемки - поведенческий сценарий:
   - Пользователь должен успешно зарегистрироваться на сайте, заполнив обязательные поля и подтвердив свой электронный адрес.
19. Перечислите критерии INVEST для User story
Ответ:
Критерии INVEST для User Story:
   - Independent (Независимость): История должна быть достаточно независимой, чтобы ее можно было реализовать отдельно от других.
   - Negotiable (Договоренность): Детали и условия истории могут быть обсуждены и уточнены между командой разработки и заказчиком.
   - Valuable (Ценность): История должна приносить добавленную ценность для пользователя или бизнеса.
   - Estimable (Оцениваемость): Историю можно оценить и оценить объем работы, необходимый для ее завершения.
   - Small (Малость): История должна быть достаточно маленькой, чтобы ее можно было реализовать за один итерационный цикл.
   - Testable (Тестируемость): История должна быть сформулирована так, чтобы ее можно было протестировать и подтвердить выполнение.