1. Требования - это что?
Ответ: Требование — это любое условие, которому должна соответствовать разрабатываемая система или программное средство.
2. Для чего нужен Анализ требований в разработке программного обеспечения?
Ответ: Найти ошибки на ранней стадии разработки.
3. Перечислите Виды требований
Ответ: Функциональные и Нефункциональные.
4. Перечислите Функциональные уровни требований
Ответ: 
	1. Бизнес-требования - эти требования определяются бизнес-потребностями и целями организации. Они описывают, почему проект или система создается и какие проблемы она должна решить для достижения бизнес-целей. Бизнес-требования обычно выражаются в общих терминах и могут включать описание рыночной ситуации, целевой аудитории, бизнес-процессов и т. д.
	2. Пользовательские требования - эти требования описывают, какие функции и возможности должны быть доступны для конечных пользователей системы. Они фокусируются на потребностях пользователей и описывают, как система должна взаимодействовать с пользователями, какие операции они должны выполнять и какой интерфейс должен быть предоставлен.
	3. Функциональные требования - эти требования определяют конкретные функции и операции, которые должны быть реализованы системой. Они описывают поведение системы в ответ на различные входные данные и события. Функциональные требования обычно формулируются в виде конкретных функций, которые должны быть реализованы, и условий, при которых эти функции должны быть выполнены.
	4. Системные требования - эти требования определяют аппаратные и программные компоненты, которые необходимы для реализации системы. Они могут включать в себя информацию о необходимых технических ресурсах (например, оборудование, сеть), операционной среде, требованиях к безопасности и производительности, а также ограничения по взаимодействию с другими системами.
5. Перечислите Нефункциональные уровни требований
Ответ: 
	1. Требования к документированию - эти требования определяют стандарты и форматы документации, которые должны быть созданы в процессе разработки и эксплуатации системы. Они могут включать в себя требования к описанию функциональности системы, архитектуре, технической документации, руководствам пользователя и т. д.
	2. Требования к дизайну и юзабилити - эти требования определяют принципы и стандарты, которым должен соответствовать дизайн пользовательского интерфейса для обеспечения удобства использования системы. Они могут включать в себя требования к навигации, визуальному оформлению, структуре информации, доступности и т. д.
	3. Требования к безопасности и надежности - эти требования определяют меры безопасности и защиты, которые должны быть реализованы в системе для предотвращения несанкционированного доступа, утечек данных, а также обеспечения устойчивости к атакам и сбоям.
	4. Требования к показателям назначения (производительность, устойчивость к сбоям и т. п.) - эти требования определяют ожидаемую производительность системы, ее способность к масштабированию, устойчивость к сбоям и отказам, а также другие характеристики, которые влияют на ее работоспособность и эффективность в различных сценариях использования.
	5. Требования к эксплуатации и персоналу - эти требования определяют условия эксплуатации системы, включая требования к обучению персонала, поддержке системы, резервному копированию данных, обновлениям и т. д.
	6. Прочие требования и ограничения (внешние воздействия, мобильность, автономность и т. п.) - эти требования включают в себя все остальные аспекты, которые не относятся к функциональным требованиям, но могут оказывать влияние на разработку, развертывание и использование системы. Это могут быть требования к внешним стандартам, ограничения по использованию ресурсов, требования к мобильности или автономности системы и т. д.
6. Перечислите техники сбора требований
Ответ: 
	1. Мозговой штурм - это метод, при котором группа участников свободно высказывает свои идеи и предложения относительно требований к проекту. Мозговой штурм способствует генерации новых идей и стимулирует творческое мышление.
	2. Анализ документов - этот метод включает изучение существующих документов, таких как отчеты, спецификации, контракты и т. д., чтобы выявить требования, которые уже были зафиксированы или описаны.
	3. Фокус-группы - это групповое обсуждение, в котором участвуют представители различных заинтересованных сторон проекта. Целью фокус-группы является сбор мнений, предпочтений и потребностей участников относительно требований к системе.
	4. Анализ интерфейсов - этот метод включает изучение взаимодействия системы с другими системами, компонентами или пользователями для определения требований, связанных с интерфейсами и взаимодействием.
	5. Интервью - это метод общения с заинтересованными сторонами проекта (заказчиками, пользователями, экспертами и т. д.) для выявления их потребностей, ожиданий и требований к системе.
	6. Наблюдение - включает непосредственное наблюдение за работой пользователей или процессов, связанных с будущей системой, чтобы понять их потребности, проблемы и предпочтения.
	7. Прототипирование - это создание временных моделей или примеров системы, которые позволяют заинтересованным сторонам лучше понять и визуализировать требования и функциональность проекта.
	8. Семинары - представляют собой групповые встречи, на которых участники могут обсуждать и анализировать требования к проекту, обмениваться идеями и принимать коллективные решения.
	9. Опрос - это метод сбора информации путем задания вопросов участникам проекта или другим заинтересованным сторонам для получения их мнения, предпочтений и требований к системе.
7. Что такое Спецификация требований программного обеспечения (SRS)?
Ответ:  Структурированный набор требований/запросов (функциональность, производительность, конструктивные ограничения и атрибуты) к программному обеспечению и его внешним интерфейсам.
8. Что такое Use Case?
Ответ: Это сценарная техника описания взаимодействия.
9. Приведите пример Use Case
Ответ: После успешного входа пользователю отсылается уведомление на mail id
10. Перечислите Характеристики качества требований
Ответ: 
	1. Единичность - Требование должно описывать только одну функцию или свойство системы. Это помогает избежать неоднозначности и конфликтов между требованиями.
	2. Атомарность - Требование должно быть неделимым и не разбиваться на более мелкие компоненты. Это обеспечивает четкость и ясность формулировки, а также упрощает оценку и отслеживание требований.
	3. Завершенность - Требование должно описывать все необходимые аспекты функции или свойства системы без упущений. Это позволяет избежать недопонимания и неполных реализаций.
	4. Последовательность - Требования должны быть упорядочены и структурированы таким образом, чтобы их легко было понять и использовать. Это облегчает разработку, тестирование и обслуживание системы.
	5. Отслеживаемость - Каждое требование должно иметь уникальный идентификатор или метку, которая позволяет однозначно идентифицировать его во всех этапах разработки и тестирования.
	6. Актуальность - Требования должны отражать текущие потребности и цели бизнеса или пользователей. Они должны быть своевременными и соответствовать текущему контексту и требованиям рынка.
	7. Выполнимость - Требования должны быть осуществимыми в рамках технических, временных и финансовых ограничений проекта. Они должны быть реалистичными и осуществимыми для команды разработки.
	8. Понятность - Требования должны быть ясными, понятными и доступными для всех заинтересованных сторон. Они должны быть сформулированы таким образом, чтобы избежать двусмысленности и недопонимания.
	9. Проверяемость - Требования должны быть сформулированы таким образом, чтобы их можно было проверить на соответствие их реализации. Они должны быть конкретными и измеримыми, чтобы можно было установить, были ли они выполнены.
	10. Обязательность - Требования должны быть обязательными для реализации. Они должны отражать необходимость функций или свойств системы и не должны быть лишними или избыточными.
	11. Полнота - Требования должны охватывать все основные аспекты функций и свойств системы без пропусков. Они должны быть достаточно полными, чтобы обеспечить успешную разработку и использование системы.
11. Приведите пример к каждой Характеристике качества требований
Ответ:  Единичность - Система должна позволять регистрацию пользователей.
        Атомарность - Пользователь может авторизоваться с помощью следующих соцсетей: VK, ОК, Fb.
        Завершенность - В функционале, описывающем регистрацию: «для завершения регистрации пользователь должен ввести капчу». Больше это требование не встречается в документации.
        Последовательность - когда пользователь снимает трубку, телефон должен издавать гудок (примечание: для проверки требуется общий анализ документации).
        Отслеживаемость - В приложении требуется подтверждения возраста (согласно требованию этического комитета заказчика).
        Актуальность - Приложение должно работать в ОС Win не ниже 10.
        Выполнимость - Приложение должно загружаться на ПК пользователя за 3 секунды.
        Понятность - Поле ввода “Номер телефона” имеет маску на ввод, которая позволяет вводить в поле только цифры от 0 до 9 .
        Проверяемость - Карточки в каталоге товара должны отображаться в виде таблицы. В каждой ячейке таблицы отображается превью товара размером 12х12.
        Обязательность - В интернет-магазине можно добавить товар на витрину.
        Полнота - Для ввода в поле доступны только буквы русского алфавита и пробел. Остальные символы ввести нельзя. Ввод не может начинаться с пробела, только с буквы. Регистр не имеет значения. Ограничения на ввод: минимум 2 максимум 160 символов. Поле обязательного заполнения приходит в состояние ошибки при потере фокуса без заполнения, при отправке пустого поля и при вводе количества символов меньше минимального. Снятие ошибки происходит при вводе значения, соответствующего маске ввода и валидации.
12. Что такое Пользовательские истории(User story)?
Ответ: Пользовательские истории — способ описания требований к разрабатываемой системе, сформулированных как одно или более предложений на повседневном или деловом языке пользователя.
13. Приведите пример Пользовательских историй(User story)
Ответ: Как продакт менеджер, я хочу быть в состоянии понять прогресс моих коллег, чтобы я мог лучше сообщать о наших успехах и неудачах стейкхолдерам.
14. Какие преимущества и недостатки Пользовательских историй(User story)?
Ответ:
Преимущества пользовательских историй (User Story):
User Story сфокусирована на пользователях, что помогает получить обратную связь от них и узнать их точки зрения, боли и потребности.
User Story можно обсуждать в команде, что позволяет каждому участнику предлагать идеи, думая как пользователь.
User Story помогает поэтапно разрабатывать продукт, описывая функции, которые можно разработать и протестировать за одну итерацию.
Недостатки пользовательских историй:
User Story не заменит требований, и для полного описания требований может быть недостаточно.
Если в User Story недостаточно деталей, её можно по-разному интерпретировать, что может привести к ошибкам в продукте.
15. Что такое Критерии приемки(Acceptance criteria)?
Ответ: Критерии, которым должны соответствовать компонент или система, для того, чтобы быть принятыми пользователем, заказчиком или другим уполномоченным лицом.
16. Перечислите виды и форматы критерий приемки
Ответ: 
Существует два основных типа критериев приемки, основанные на сценариях и правилах:
Критерии приемлемости, основанные на сценариях (Scenario-based acceptance criteria), используют шаблон для подробного описания конкретного поведения / последовательности действий пользователя;
Критерии приемлемости на основе правил (Rule-based acceptance criteria) - это скорее простой список того, как функция должна выглядеть / работать.
17. Приведите пример критерий приемки- список правил
Ответ:
Rule-Based Acceptance Criteria - это простой список «правил» о том, как функция должна выглядеть / работать:
	1. Все кнопки должны быть определенного цвета;
	2. Кнопка входа должна перенаправлять пользователя в определенный раздел;
	3. Кнопка регистрации должна находиться в определенной области;
	4. Все кнопки должны быть серыми, если не выполняются определенные требования;
18. Приведите пример критерий приемки- поведенческий сценарий
Ответ: 
Scenario-based acceptance criteria соответствует формату “Дано/Когда/Тогда” (“Given/When/Then”) (основан на BDD - behavior driven development):
Given /какой-то аспект, связанный с поведением пользователя/
When /пользователь выполняет определенное действие/
Then /происходит определенный результат/

ДАНО Пользователь Отредактировал Поле1, Поле2 на Экране 1
КОГДА пользователь нажимает на Сохранить на Экране1,
ТОГДА:
Введенные данные сохраняются в системе
19. Перечислите критерии INVEST для User story
Ответ:
Критерии INVEST для User Story:
   - Independent (Независимость): История должна быть достаточно независимой, чтобы ее можно было реализовать отдельно от других.
   - Negotiable (Договоренность): Детали и условия истории могут быть обсуждены и уточнены между командой разработки и заказчиком.
   - Valuable (Ценность): История должна приносить добавленную ценность для пользователя или бизнеса.
   - Estimable (Оцениваемость): Историю можно оценить и оценить объем работы, необходимый для ее завершения.
   - Small (Малость): История должна быть достаточно маленькой, чтобы ее можно было реализовать за один итерационный цикл.
   - Testable (Тестируемость): История должна быть сформулирована так, чтобы ее можно было протестировать и подтвердить выполнение.