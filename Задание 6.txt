1. Что такое Ошибка/Дефект/Отказ?
Ответ: Ошибка - Действие человека, которое приводит к неправильному результату.
Дефект - Несовершенство или недостаток рабочего продукта, проявляющееся в несоответствии требованиям или спецификациям.
Отказ - Событие, при котором компонент или система не выполняют требуемую функцию в соответствии со спецификацией.
2. Перечислите Основные типы багов?
Ответ: Функциональные, Визуальные, Логические, Дефекты UX, Дефекты безопасности. 
3. Перечислите “Хитрые баги”?
Ответ: 
1. Гейзенбаг
2. Борбаг
3. Мандельбаг
4. Шрединбаг
5. Лунный баг
6. Статистический
7. Хинденбаг
8. Баг Хиггса
4. Приведите пример Blocker bug
Ответ: Пользователь заполнил форму регистрации, но по нажатию на кнопку "Зарегистрироваться" появляется сообщение "Произошла непредвиденная ошибка"
5. Приведите пример Critical bug
Ответ: неверный расчет скидки на товар.
6. Приведите пример Major bug
Ответ: Нельзя добавить товар с главной страницы товара, но можно с карточки товара.
7. Приведите пример Minor bug
Ответ: На англоязычном сайте https://www.facebook.com/ по умолчанию стоит китайский язык. 
8. Приведите пример Trivial bug
Ответ: Опечатка в тексте.
9. Какой жизненный цикл Bug report?
Ответ:
Жизненный цикл баг-репорта включает следующие этапы:
1. Создание: Баг-репорт создается тестировщиком после обнаружения дефекта. Включает в себя описание проблемы, шаги для воспроизведения и другие необходимые детали.
2. Назначение: Баг-репорт назначается ответственному разработчику или команде для дальнейшего анализа и исправления.
3. Исправление: Разработчик работает над исправлением дефекта, основываясь на предоставленной информации в баг-репорте.
4. Верификация: После внесения исправлений тестировщик проверяет, был ли дефект успешно устранен. Верификация включает в себя повторное тестирование, используя шаги из баг-репорта.
5. Закрытие: Если дефект успешно исправлен и верифицирован, баг-репорт закрывается. В противном случае, процесс может повториться с новыми итерациями исправлений и верификации.
10. Какие основные цели локализации дефекта?
Ответ: Чем больше информации о проблеме — тем быстрее ее решит команда.
11. Где могут находиться дефекты?
Ответ: Дефекты могут находиться в различных частях программного продукта. Вот несколько мест, где часто происходит обнаружение дефектов:
1. Функциональность: Ошибки в логике программы, несоответствие требованиям или неправильное выполнение определенных функций.
2. Интерфейс пользователя: Проблемы с элементами управления, визуальным отображением, адаптацией к разным разрешениям экранов.
3. Производительность: Дефекты, влияющие на скорость работы приложения, загрузку страниц, эффективность использования ресурсов.
4. Совместимость: Неудовлетворительная работа на различных платформах, браузерах, устройствах или операционных системах.
5. Безопасность: Уязвимости, которые могут быть использованы для несанкционированного доступа или нанесения ущерба системе.
6. Интеграция: Проблемы во взаимодействии с другими компонентами или сторонними сервисами.
7. Данные: Ошибки в обработке, хранении или передаче данных, которые могут привести к потере информации или нарушению конфиденциальности.
8. Надежность: Дефекты, вызывающие сбои, зависания или некорректное восстановление после сбоев.
12. Перечислите методы локализации дефекта в клиентской части
Ответ:
1. Тестирование в разных браузерах: Проверка работы приложения в различных веб-браузерах для выявления проблем, связанных с совместимостью.
2. Анализ кода и консольные сообщения: Исследование кода клиентской части и анализ сообщений в консоли браузера для выявления ошибок и предупреждений.
3. Тестирование на разных устройствах и разрешениях экранов: Проверка отзывчивости и корректной работы интерфейса приложения на различных устройствах и разрешениях экранов.
4. Тестирование в разных операционных системах: Проверка работы приложения на различных операционных системах (Windows, macOS, Linux) для выявления платформенных особенностей.
5. Тестирование производительности клиента: Оценка быстродействия и отклика пользовательского интерфейса при различных условиях, таких как медленное соединение или низкая производительность устройства.
13. Перечислите методы локализации дефекта в серверной части
Ответ:
1. Тестирование API: Проверка корректной передачи данных между клиентской и серверной частями при использовании API.
2. Тестирование базы данных: Проверка правильности хранения и извлечения данных из базы данных, а также обработка запросов к базе данных.
3. Мониторинг сетевого трафика: Анализ сетевого трафика между клиентом и сервером для выявления проблем в передаче данных.
4. Тестирование нагрузки: Оценка стойкости сервера к нагрузке, выявление узких мест и проблем с производительностью.
5. Анализ серверных логов: Изучение логов сервера для выявления ошибок, предупреждений и другой полезной информации о его работе.
6. Тестирование безопасности: Проверка серверной части на уязвимости, связанные с безопасностью, чтобы предотвратить возможные атаки.