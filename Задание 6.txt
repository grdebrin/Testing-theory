1. Что такое Ошибка/Дефект/Отказ?
Ответ: Ошибка - Действие человека, которое приводит к неправильному результату.
Дефект - Несовершенство или недостаток рабочего продукта, проявляющееся в несоответствии требованиям или спецификациям.
Отказ - Событие, при котором компонент или система не выполняют требуемую функцию в соответствии со спецификацией.
2. Перечислите Основные типы багов?
Ответ: Функциональные, Визуальные, Логические, Дефекты UX, Дефекты безопасности. 
3. Перечислите “Хитрые баги”?
Ответ: 
	1. Гейзенбаг: Этот термин обычно используется для описания бага или ошибки программы, который проявляется только в определенных условиях или ситуациях, например, во время выполнения определенной последовательности действий. Название, вероятно, происходит от фразы "гейзенберговский принцип", относящегося к неопределенности в квантовой механике.
	2. Борбаг: Этот термин может относиться к багу, который проявляется случайно и не может быть легко воспроизведен. Название, вероятно, происходит от слова "борьба", что указывает на то, что разработчики борются с проблемой, но она по-прежнему остается неясной и трудной для решения.
	3. Мандельбаг: Этот термин обычно используется для описания бага, который возникает только в очень сложных или чрезвычайных ситуациях. Название, вероятно, происходит от фрактального образа Мандельброта, который сложен и непредсказуем.
	4. Шрединбаг: Этот термин обычно описывает баг, который проявляется или исчезает при наблюдении, что напоминает принцип неопределенности Шредингера в квантовой механике. Это может быть связано с тем, что наблюдение или действие программы влияет на ее поведение.
	5. Лунный баг: Этот термин используется для обозначения бага, который возникает из-за пограничных условий или некорректной работы при определенной фазе цикла разработки программного обеспечения. Это может быть связано с идеей, что баги возникают из "лунных" условий или событий, которые не происходят регулярно.
	6. Статистический: Этот термин обычно означает баг, который проявляется только в определенных статистических условиях или при определенной вероятности. Это может быть связано с тем, что баги проявляются только при определенной частоте использования программы или в определенной группе пользователей.
	7. Хинденбаг: Этот термин обычно используется для описания крупного и катастрофического бага, который приводит к серьезным последствиям или отказу системы. Название, вероятно, происходит от катастрофы с легендарным дирижаблем Hindenburg.
	8. Баг Хиггса: Этот термин может быть использован для описания бага, который долго оставался необъясненным или необнаруженным в коде, а затем был обнаружен и исправлен. Название, вероятно, происходит от аналогии с частицей Хиггса, которая долгое время была предсказана, но не была экспериментально обнаружена.
4. Приведите пример Blocker bug
Ответ: Пользователь заполнил форму регистрации, но по нажатию на кнопку "Зарегистрироваться" появляется сообщение "Произошла непредвиденная ошибка"
5. Приведите пример Critical bug
Ответ: неверный расчет скидки на товар.
6. Приведите пример Major bug
Ответ: Нельзя добавить товар с главной страницы товара, но можно с карточки товара.
7. Приведите пример Minor bug
Ответ: На англоязычном сайте https://www.facebook.com/ по умолчанию стоит китайский язык. 
8. Приведите пример Trivial bug
Ответ: Опечатка в тексте.
9. Какой жизненный цикл Bug report?
Ответ:
Жизненный цикл баг-репорта включает следующие этапы:
1. Создание: Баг-репорт создается тестировщиком после обнаружения дефекта. Включает в себя описание проблемы, шаги для воспроизведения и другие необходимые детали.
2. Назначение: Баг-репорт назначается ответственному разработчику или команде для дальнейшего анализа и исправления.
3. Исправление: Разработчик работает над исправлением дефекта, основываясь на предоставленной информации в баг-репорте.
4. Верификация: После внесения исправлений тестировщик проверяет, был ли дефект успешно устранен. Верификация включает в себя повторное тестирование, используя шаги из баг-репорта.
5. Закрытие: Если дефект успешно исправлен и верифицирован, баг-репорт закрывается. В противном случае, процесс может повториться с новыми итерациями исправлений и верификации.
10. Какие основные цели локализации дефекта?
Ответ: Чем больше информации о проблеме — тем быстрее ее решит команда.
11. Где могут находиться дефекты?
Ответ: 
	1. В клиентской части: Это означает, что проблемы возникают на стороне клиента или пользовательского интерфейса. Это могут быть ошибки в логике приложения, проблемы с отображением данных, неправильное поведение элементов интерфейса и т. д. Дефекты на этом уровне могут влиять на взаимодействие пользователя с приложением.
	2. В серверной части: Это указывает на проблемы, возникающие на сервере или в бизнес-логике приложения. Это могут быть ошибки в обработке запросов, неверная логика приложения, проблемы с безопасностью данных и т. д. Дефекты на этом уровне могут влиять на обработку данных и взаимодействие сервера с клиентской частью.
	3. В настройках тестового окружения: Это означает, что проблемы возникают из-за неправильных настроек или конфигурации тестовой среды. Это могут быть проблемы с доступом к данным, неверная конфигурация тестовых баз данных, неправильные настройки сети и т. д. Дефекты на этом уровне могут привести к некорректным результатам тестирования или невозможности проведения тестов.
	4. В точках интеграции: Это указывает на проблемы, возникающие в точках интеграции между различными компонентами системы. Это могут быть ошибки в передаче данных между системами, несоответствия в форматах данных, проблемы с синхронизацией и т. д. Дефекты на этом уровне могут привести к неполной интеграции системы или неправильному взаимодействию компонентов.
	5. На уровне БД: Это означает, что проблемы возникают на уровне базы данных. Это могут быть ошибки в структуре базы данных, неправильные запросы к базе данных, проблемы с производительностью и т. д. Дефекты на этом уровне могут привести к неправильному хранению или обработке данных, что в конечном итоге может повлиять на работу всей системы.
12. Перечислите методы локализации дефекта в клиентской части
Ответ:
1. Тестирование в разных браузерах: Проверка работы приложения в различных веб-браузерах для выявления проблем, связанных с совместимостью.
2. Анализ кода и консольные сообщения: Исследование кода клиентской части и анализ сообщений в консоли браузера для выявления ошибок и предупреждений.
3. Тестирование на разных устройствах и разрешениях экранов: Проверка отзывчивости и корректной работы интерфейса приложения на различных устройствах и разрешениях экранов.
4. Тестирование в разных операционных системах: Проверка работы приложения на различных операционных системах (Windows, macOS, Linux) для выявления платформенных особенностей.
5. Тестирование производительности клиента: Оценка быстродействия и отклика пользовательского интерфейса при различных условиях, таких как медленное соединение или низкая производительность устройства.
13. Перечислите методы локализации дефекта в серверной части
Ответ:
1. Тестирование API: Проверка корректной передачи данных между клиентской и серверной частями при использовании API.
2. Тестирование базы данных: Проверка правильности хранения и извлечения данных из базы данных, а также обработка запросов к базе данных.
3. Мониторинг сетевого трафика: Анализ сетевого трафика между клиентом и сервером для выявления проблем в передаче данных.
4. Тестирование нагрузки: Оценка стойкости сервера к нагрузке, выявление узких мест и проблем с производительностью.
5. Анализ серверных логов: Изучение логов сервера для выявления ошибок, предупреждений и другой полезной информации о его работе.
6. Тестирование безопасности: Проверка серверной части на уязвимости, связанные с безопасностью, чтобы предотвратить возможные атаки.